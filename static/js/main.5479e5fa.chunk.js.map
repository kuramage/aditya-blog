{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","index.js"],"names":["Navbar","props","React","createElement","className","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","Textform","text","setText","useState","noOfWords","split","length","Fragment","heading","rows","value","onChange","event","target","style","backgroundColor","handelUpClick","newText","toUpperCase","alert","handleLoClick","toLowerCase","handleClearClick","speakText","utterance","SpeechSynthesisUtterance","window","speechSynthesis","speak","handelCopy","navigator","clipboard","writeText","handelspace","join","Alert","mssg","letter","charAt","slice","capitalise","message","data-bs-dismiss","prototype","PropTypes","string","isRequired","App","setMode","setAlert","showAlert","setTimeout","Router","document","body","color","Routes","Route","path","element","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5479e5fa.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode==='light'?'bisque':'dark'}  bg-${props.mode==='light'?'bisque':'dark'}`} >\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/About\">About</Link>\r\n              </li>        \r\n            </ul>\r\n            <div className={`form-check form-switch text- ${props.mode==='light'?'dark':'light'}`} >\r\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n            <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}` } htmlFor=\"flexSwitchCheckDefault\">{`${props.mode==='light'?'Light':'Dark'}`} Mode</label>\r\n          </div>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\nNavbar.prototype={\r\n    title:PropTypes.string.isRequired\r\n}\r\n// Navbar.defaultProps={\r\n//     title:'Default Title'\r\n// };\r\n\r\n","import React,{useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n    const [text,setText] = useState(\"\");\r\n    const handelUpClick = ()=>{\r\n        // console.log(\"uppercase is clicked\");\r\n        const newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.alert('Text converted to Uppercase','success')\r\n    }\r\n    const handelOnChange = (event)=>{\r\n        // console.log(\"OnChange\");\r\n        setText(event.target.value);\r\n    }\r\n    const noOfWords = ()=>{\r\n        if(text==''){\r\n            return 0;\r\n        }\r\n        else{\r\n            return text.split(\" \").length;\r\n        }\r\n    }\r\n    const handleLoClick = ()=>{\r\n        const newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.alert('Text converted to Lowercase','success')\r\n    }\r\n    const handleClearClick = ()=> {\r\n        setText(\"\");\r\n        props.alert('Cleared text','success')\r\n    }\r\n    const speakText = () => {\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        window.speechSynthesis.speak(utterance);\r\n    }\r\n    const handelCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.alert('Text Copied to clipboard','success')\r\n    }\r\n    const handelspace = () =>{\r\n        const newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n    <div>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">  \r\n            <textarea className=\"form-control \" id=\"myBox\" rows=\"12\" value={text} onChange={handelOnChange} style={{backgroundColor:props.mode==='dark'?'darkgrey':'white'}}></textarea>\r\n        </div>\r\n        <button className=\"btn btn-success\" onClick={handelUpClick}>Convert to uppercase</button>\r\n        <button className='btn btn-success mx-2' onClick={handleLoClick} >Convert to Lowercase</button>\r\n        <button className=\"btn btn-success\" onClick={handleClearClick}>Clear Text</button>\r\n        <button className=\"btn btn-success mx-2\" onClick={speakText} > Text-to-Speech</button>\r\n        <button className=\"btn btn-success \" onClick={handelCopy} > Copy Text</button>\r\n        <button className=\"btn btn-success mx-2\" onClick={handelspace} > Remove Extraspaces</button>\r\n    </div>\r\n    <div className=\"container my-2\">\r\n        <h2>Your Text Summary </h2>\r\n        <p> <b>{noOfWords()}</b> words and  <b>{text.length}</b> characters</p>\r\n        <p><b>{0.008* noOfWords()} </b>minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in the above box to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalise = (mssg)=>{\r\n        const letter= mssg.toLowerCase();\r\n        return letter.charAt(0).toUpperCase() + letter.slice(1);\r\n    }\r\n\r\n  return (\r\n\r\n      props.alert && <div className={`alert alert-${props.alert.type}  alert-dismissible fade show `} role=\"alert\">\r\n         <strong>{capitalise(props.alert.type)}</strong>: {props.alert.message}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n      </div>\r\n\r\n  )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (mssg, type) => {\n    setAlert({\n      message: mssg,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'dark') {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light Mode is enabled\", \"success\");\n    } else {\n      setMode('dark');\n      document.body.style.backgroundColor = 'darkslategrey';\n      document.body.style.color = 'bisque';\n      showAlert(\"Dark Mode is enabled\", \"success\");\n    }\n  }\n\n  return (\n    <Router>\n      <Navbar title='TextUtils' mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className='container my-3'>\n        <Routes>\n          {/* <Route path=\"/about\" element={<About />} /> */}\n          <Route path=\"/\" element={<Textform heading=\"Enter text to analyze\" mode={mode} alert={showAlert} />} />\n          </Routes>\n      </div>\n      </Router>\n   \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}